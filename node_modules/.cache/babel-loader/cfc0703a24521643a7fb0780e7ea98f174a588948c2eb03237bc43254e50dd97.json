{"ast":null,"code":"var _jsxFileName = \"/Users/sonminseog/Desktop/Web/React/udemy/http-request-pratice/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  async function fetchMovieHandler() {\n    try {\n      setIsLoading(true);\n      setError(null);\n      const res = await fetch(\"https://swapi.dev/api/films\");\n      if (!res.ok) {\n        throw new Error(\"Something Worng!\");\n      }\n      const data = await res.json();\n      const transformMovies = data.results.map(movie => {\n        return {\n          id: movie.episode_id,\n          title: movie.title,\n          openingText: movie.opening_crawl,\n          releaseDate: movie.release_date\n        };\n      });\n      setMovies(transformMovies);\n      setIsLoading(false);\n    } catch (err) {\n      setError(err.message);\n    }\n    setIsLoading(false);\n  }\n  let content = /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Found No Movies.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 17\n  }, this);\n  if (movies.length > 0) {\n    content = /*#__PURE__*/_jsxDEV(MoviesList, {\n      movies: movies\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 15\n    }, this);\n  }\n  if (error) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 15\n    }, this);\n  }\n  if (isLoading) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loadding...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 15\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchMovieHandler,\n        children: \"Fetch Movies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"zuBJAn2dLkBMoQCfa8VUzB2Qvvo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","MoviesList","jsxDEV","_jsxDEV","App","_s","movies","setMovies","isLoading","setIsLoading","error","setError","fetchMovieHandler","res","fetch","ok","Error","data","json","transformMovies","results","map","movie","id","episode_id","title","openingText","opening_crawl","releaseDate","release_date","err","message","content","children","fileName","_jsxFileName","lineNumber","columnNumber","length","Fragment","onClick","_c","$RefreshReg$"],"sources":["/Users/sonminseog/Desktop/Web/React/udemy/http-request-pratice/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  async function fetchMovieHandler() {\n    try {\n      setIsLoading(true);\n\n      setError(null);\n\n      const res = await fetch(\"https://swapi.dev/api/films\");\n\n      if (!res.ok) {\n        throw new Error(\"Something Worng!\");\n      }\n\n      const data = await res.json();\n\n      const transformMovies = data.results.map((movie) => {\n        return {\n          id: movie.episode_id,\n          title: movie.title,\n          openingText: movie.opening_crawl,\n          releaseDate: movie.release_date,\n        };\n      });\n\n      setMovies(transformMovies);\n\n      setIsLoading(false);\n    } catch (err) {\n      setError(err.message);\n    }\n    setIsLoading(false);\n  }\n\n  let content = <p>Found No Movies.</p>;\n\n  if (movies.length > 0) {\n    content = <MoviesList movies={movies} />;\n  }\n\n  if (error) {\n    content = <p>{error}</p>;\n  }\n\n  if (isLoading) {\n    content = <p>Loadding...</p>;\n  }\n\n  return (\n    <React.Fragment>\n      <section>\n        <button onClick={fetchMovieHandler}>Fetch Movies</button>\n      </section>\n      <section>\n        {/* {!isLoading && movies.length > 0 && <MoviesList movies={movies} />}\n        {!isLoading && movies.length === 0 && !error && <p>Found No Movies.</p>}\n        {!isLoading && error && <p>{error}</p>}\n        {isLoading && <p>Loadding...</p>} */}\n        {content}\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}